x <<- mrx
inverse_mrx <<- NULL
}
get <- function() x
setInverse <- function(inverse) inverse_mrx <<- inverse
getInverse <- function() inverse_mrx
list(set = set,get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
x<-matrix(1:4, 2, 2)
x
my_matrix<-makeCacheMatrix(x)
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$get()
my_matrix$set(matrix(c(2,2,1,4),2,2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
cacheSolve(my_matrix)
R.home(MYSQL_HOME=C:/Program Files/MySQL/MySQL Server5.7)
R.home(MYSQL_HOME=C:\\Program Files\\MySQL\\MySQL Server5.7)
R.home(MYSQL_HOME="C:\\Program Files\\MySQL\\MySQL Server5.7")
?R.home
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines<-readlines(url,n=10)
lines<-readLines(url,n=10)
w<-c(1,9,5,4,1,3,5,4,1,3,5,4,1,3,5,4,1,3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
library(swilr)
library("swilr")
library(swirl)
swirl()
mydf.Check<-read.csv(path2csv,stringsAsFactors = FASLE)
mydf.Check<-read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
select(cran,-x:size)
select(cran,-(x:size))
-5:20
(-5:20)
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version == "3.1.1", country =="US")
?Comparison
filter(cran,country=="IN",r_version<="3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,4,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
crans<-select(cran,size:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mytate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dlypr)
library(dplyr)
cran<-tbl_df(mydf)
rem("mydf")
rm("mydf")
cran
?goup_by
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit(0)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,into=c("sex","class"))
submit()
submit()
submi()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(paseed,status="passed")
mutate(passed,status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_row(passed,failed)
bind_rows(passed,failed)
sat
submit()
?separate
submit()
submit()
d<-read.csv(file.choose(),header=TRUE)
dim(d)
levels(d$AGS)
class(d$AGS)
names(d)
library(dplyr)
mutate(d,agricultuLogical=(ACR==3&&AGS==6))
which(agricultureLogical)
d[which(agricultureLogical)]
d[which(agricultuLogical)]
d[which(d$agricultuLogical)]
which(d$agricultuLogical)
d[which(d$agricultuLogical==TRUE),]
agricultureLogical<-d$ACR==3&d$AGS==6
dim(africultureLogical)
dim(agricultureLogical)
length(agricultureLogical)
dim(d)
head(which(agricultureLogical),3)
test<-which(agricultureLogical)
head(test)
library(jpeg)
packages("jpeg")
packageName("jpeg")
install.packages("jpeg")
library(jpeg)
file_pic<-'https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
dest2<-'/Users/DorisLiu/Desktop'
download.file(file_pic,dest2,mode='wb',method='curl')
download.file(file_pic,'C:\\Users\\DorisLiu\\Desktop\\',mode='wb',method='curl')
data2<-readJPEG(file.choose(),native=TRUE)
quantile(data2,probs=c(0.3,0.8))
fileURL3<'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
fileURL3<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
dest3<-'C:\\Users\\DorisLiu\\Desktop\\'
download.file(fileURL3,dest3,method='curl')
fileURL32<-'ttps://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
fileURL32<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
des太2
dest32<-'C:\\Users\\DorisLiu\\Desktop\\'
download.file(fileURL32,dest32,method='curl')
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y,pch=20)
plot(x,y,pch=19)
plot(x,y,pch=2)
example("points")
plot(x,y,pch=20)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch=20)
title("Scatter Plort")
text(-2,-2,"label")
lengend("topleft",lengend="Data")
legend("topleft",legend="Data")
legend("topleft",legend="Data",pch=20)
fit<-lm(y~x)
abline(fit)
abline(fit,lwd=3)
abline(fit,lwd=3,col="blue")
plot(x,y,xlab="weight",ylab="height",main="test",pch=20)
fit<-ln(y~x)
fit<-lm(y~x)
abline(fit,lwd=3,col="red")
z<-rpois(11,2)
z<-rpois(100,2)
par(mfrow=c(2,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par("mar")
par(mar=c(2,2,1,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,1))
x<-rnorm(100)
y<-x+rnorm(100)
g<-gl(2,50)
g<-gl(2,50,labels=c("Male","Female"))
str(g)
plot(x,y)
plot(x,y,type="n")
points(x[g=="Male"],y[g=="Male"], col="green")
points(x[g=="Female"],y[g=="Female"], col="blue")
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate")
end
();
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help（package = lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("Marrch 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 14, minutes = 23, seconds = 23)
this_moment
?now
nyc<-now(tzone="America/New_York")
nyc
depart<- nyc + days(2)
depart
depart <- update(depart, hours = hours + 17, minutes = minutes + 34)
?update
depart <- update(depart, hours = 33, minutes = 66)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + days(2)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
?mdy
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch(0)
stopwatch()
data1 <- read.csv(file.choose(),header=TRUE)
names(data1)
split_name <- strsplit(names(data1), "wgtp")
spliy_name[123]
split_name[123]
data2 <- read.csv(file.choose(),header=TRUE)
head(data2,2)
head(data2$Gross.domestic.product.2012)
head(data2,5)
data2 <- read.table(file.choose(),col.names=c("CountryShortCode","Ranking","Country",GDP),skip=5)
data2 <- read.table(file.choose(),col.names=c("CountryShortCode","Ranking","Country",GDP),skip=5)
data2 <- read.csv(file.choose(),skip=5)
head(data2,3)
data2 <- read.csv(file.choose(),header=FALSE,skip=5)
head(data2,3)
names(data2)<-c("ShortCode","Ranking","n3","Country","GDP","n6","n7","n8","n9","n10")
names(data2)
mean(data2$GDP)
class(data2$GDP)
data2$GDP <- as.numeric(data2$GDP)
class(data2$GDP)
head(data2$GDP)
mean(data2$GDP)
data2 <- read.csv(file.choose(),skip=5,col.names=c("ShortCode","Ranking","n3","Country","GDP","n6","n7","n8","n9","n10"))
head(data2,2)
class(data2$GDP)
total<-as.numeric(levels(data2$GDP))[f]
total<-as.numeric(levels(data2$GDP))[data2$GDP]
head(total)
head(total,20)
total<-data2$GDP
head(total)
total<-as.numeric(levels(total))[total]
head(total)
total<-data2$GDP
total<-as.numeric(total)
head(total)
total<-data2$GDP
head(total,15)
totalNum<-as.numeric(as.character(total))
head(totalNum)
totalNum <- as.numeric(gsub(",", "", total))
head(totalNum)
mean(totalNum, na.rm = TRUE)
grep("^United",data2$Country)
grep("^United",data2$Country,value=TRUE)
data2 <- read.csv(file.choose(),skip=5,col.names=c("ShortCode","Ranking","n3","Country","GDP","n6","n7","n8","n9","n10"),nrows=190)
grep("^United",data2$Country,value=TRUE)
data4<-read.csv(file.choose(),head=TRUE)
head(data4)
names(data4)
names(data2)
outcome<-merge(data2,data4, by.x="ShortCode",by.y = "CountryCode")
isFiscalYearEnd <- grepl("ficial year end", tolower(outcome$Special.Notes))
isJune <- grepl("june", tolower(outcome$Special.Notes))
table(isFiscalYearEnd,isJune)
install.packages("quantmod")
library(quantmod)
amzn=getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(amzn,3)
names(amzn)
dim(amzn)
row.names(amzn)
amzn[1]
amzn[1][1]
amzn[[1][1]]
head(sampleTimes)
class(sampleTimes)
addmargins(table(year(sampleTimes),weekdays(sampleTimes)))
dActivityTest  <- read.table(file.choose(),header = FALSE)
dActivityTest  <- read.table(file.choose(),header = FALSE)
dActivityTrain <- read.table(file.choose(),header = FALSE)
dSubjectTrain <- read.table(file.choose(),header = FALSE)
dSubjectTest  <- read.table(file.choose(),header = FALSE)
dFeaturesTest  <- read.table(file.choose(),header = FALSE)
dFeaturesTrain <- read.table(file.choose(),header = FALSE)
dSubject <- rbind(dSubjectTrain, dSubjectTest)
dActivity<- rbind(dActivityTrain, dActivityTest)
dFeatures<- rbind(dFeaturesTrain, dFeaturesTest)
names(dSubject)<-c("subject")
names(dActivity)<- c("activity")
dFeaturesNames <- read.table(file.choose(),head=FALSE)
names(dFeatures)<- dFeaturesNames$V2
dCombine <- cbind(dataSubject, dataActivity)
dCombine <- cbind(dSubject, dActivity)
Data <- cbind(dFeatures, dCombine)
subdFeaturesNames<-dFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dFeaturesNames$V2)]
Data<-subset(Data,select=c(as.character(subdFeaturesNames), "subject", "activity" ))
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
activityLabels <- read.table(file.choose(),header = FALSE)
head(Data$activity,10)
head(Data$activity,30)
activityLabels
levels(Data$activity)
class(Data$activity)
act<-Data$activity
act<-factor(Data$activity,levels=c(1,2,3,4,5,6),labels=activityLabels)
act<-as.factor(Data$activity)
class(act)
head(class)
head(act)
labels(act)<-activityLabels
levels(act)<-activityLabels
head(act)
act<-Data$activity
act<-as.factor(act)
levels(act)
act<-factor(Data$activity, levels = c(1,2,3,4,5,6), labels = c('WALKING','WALKING_UPSTAIRS','WALKING_DOWNSTAIRS','SITTING','STANDING','LAYING'))
head(act)
Data$activity<-factor(Data$activity, levels = c(1,2,3,4,5,6), labels = c('WALKING','WALKING_UPSTAIRS','WALKING_DOWNSTAIRS','SITTING','STANDING','LAYING'))
head(Data$activity)
head(Data$activity,30)
getwd()
setwd("C:\\Users\\DorisLiu\\Desktop\\Getting-and-Cleaning-Data-Asg4)
;
""
getwd()
getwd()
getwd(0)
getwd()
getwd()
setwd(file.choose())
setwd("C:\\Users\\DorisLiu\\Desktop\\Getting-and-Cleaning-Data-Asg4")
getwd()
dActivityTest  <- read.table(file.choose(),header = FALSE)
dActivityTrain <- read.table(file.choose(),header = FALSE)
dSubjectTest  <- read.table(file.choose(),header = FALSE)
dSubjectTrain <- read.table(file.choose(),header = FALSE)
dFeaturesTest  <- read.table(file.choose(),header = FALSE)
dFeaturesTrain <- read.table(file.choose(),header = FALSE)
dSubject <- rbind(dSubjectTrain, dSubjectTest)
dActivity<- rbind(dActivityTrain, dActivityTest)
dFeatures<- rbind(dFeaturesTrain, dFeaturesTest)
names(dSubject)<-c("subject")
names(dActivity)<- c("activity")
dFeaturesNames <- read.table(file.choose(),head=FALSE)
names(dFeatures)<- dFeaturesNames$V2
dCombine <- cbind(dSubject, dActivity)
Data <- cbind(dFeatures, dCombine)
subdFeaturesNames<-dFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dFeaturesNames$V2)]
Data<-subset(Data,select=c(as.character(subdFeaturesNames), "subject", "activity" ))
activityLabels <- read.table(file.choose(),header = FALSE)
Data$activity<-factor(Data$activity, levels = c(1,2,3,4,5,6), labels = c('WALKING','WALKING_UPSTAIRS','WALKING_DOWNSTAIRS','SITTING','STANDING','LAYING'))
head(Data$activity)
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
library(plyr)
d2<-aggregate(. ~subject + activity, Data, mean)
d2<-d2[order(d2$subject,d2$activity),]
write.table(d2, file = "tidydata.txt",row.name=FALSE)
install.packages("knitr")
library(knitr)
knit2html("codebook.Rmd")
codebook(d2)
install.packages("memisc")
library(memisc)
codebook(d2)
Write(codebook(d2),file="TidyData_CodeBook.txt")
description(d2)
head(d2,1)
Write(codebook(d2),file="TidyData_CodeBook.md")
